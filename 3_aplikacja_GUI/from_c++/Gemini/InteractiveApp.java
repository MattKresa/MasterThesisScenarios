import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import org.json.JSONObject;
import org.json.JSONTokener;

/**
 * InteractiveApp is a Swing-based application that demonstrates interactive
 * UI elements, message display, and saving/loading user settings.
 */
public class InteractiveApp extends JFrame implements ActionListener {

    // UI Components
    private JLabel nameLabel;
    private JTextField nameInput;
    private JLabel colorLabel;
    private JComboBox<String> colorDropdown;
    private JCheckBox emojiCheck;
    private JLabel fontLabel;
    private JSlider fontSlider;
    private JButton button;
    private JLabel resultLabel;

    // File for saving user settings
    private static final String SAVE_FILE = "user_settings.json";

    /**
     * Constructor for the InteractiveApp.
     * Initializes the UI components, sets up the layout,
     * connects event listeners, and loads previous settings.
     */
    public InteractiveApp() {
        super("Interactive App"); // Set window title
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // Close operation
        setBounds(300, 300, 400, 300); // Set initial window position and size

        // Initialize UI components
        nameLabel = new JLabel("Enter your name:");
        nameInput = new JTextField(20); // Text field for name input

        colorLabel = new JLabel("Choose a color:");
        String[] colors = {"Black", "Blue", "Green", "Red", "Purple"};
        colorDropdown = new JComboBox<>(colors); // Dropdown for color selection

        emojiCheck = new JCheckBox("Add an emoji ðŸ˜Š"); // Checkbox for emoji

        fontLabel = new JLabel("Select font size:");
        fontSlider = new JSlider(JSlider.HORIZONTAL, 10, 30, 12); // Slider for font size
        fontSlider.setMajorTickSpacing(5); // Tick spacing
        fontSlider.setPaintTicks(true);    // Show ticks
        fontSlider.setPaintLabels(true);   // Show labels for ticks

        button = new JButton("Show Message"); // Button to trigger message display
        resultLabel = new JLabel(""); // Label to display the result message
        resultLabel.setHorizontalAlignment(SwingConstants.CENTER); // Center align text

        // Set up the layout using BoxLayout for vertical arrangement
        JPanel contentPane = new JPanel();
        contentPane.setLayout(new BoxLayout(contentPane, BoxLayout.Y_AXIS));
        contentPane.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10)); // Add padding

        // Add components to the content pane
        contentPane.add(nameLabel);
        contentPane.add(nameInput);
        contentPane.add(Box.createVerticalStrut(10)); // Spacer
        contentPane.add(colorLabel);
        contentPane.add(colorDropdown);
        contentPane.add(Box.createVerticalStrut(10));
        contentPane.add(emojiCheck);
        contentPane.add(Box.createVerticalStrut(10));
        contentPane.add(fontLabel);
        contentPane.add(fontSlider);
        contentPane.add(Box.createVerticalStrut(20));
        contentPane.add(button);
        contentPane.add(Box.createVerticalStrut(20));
        contentPane.add(resultLabel);

        // Add the content pane to the frame
        add(contentPane);

        // Register the button's action listener
        button.addActionListener(this);

        // Load previously saved settings
        loadSettings();
    }

    /**
     * Handles action events, specifically the button click.
     * @param e The ActionEvent generated by the button click.
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == button) {
            showMessage();
        }
    }

    /**
     * Retrieves user input, constructs a message, displays it with
     * selected styling, and saves the current settings.
     */
    private void showMessage() {
        String name = nameInput.getText().trim(); // Get name and remove whitespace
        String color = (String) colorDropdown.getSelectedItem(); // Get selected color
        boolean emoji = emojiCheck.isSelected(); // Check if emoji checkbox is selected
        int fontSize = fontSlider.getValue(); // Get selected font size

        // Validate if the name input is empty
        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter your name!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Construct the message string
        String message = String.format("Hello, %s! Your favorite color is %s.", name, color);
        if (emoji) {
            message += " ðŸ˜Š";
        }

        // Set the message text
        resultLabel.setText(message);

        // Apply styling (color and font size)
        Color textColor = getColorFromString(color);
        resultLabel.setForeground(textColor);
        resultLabel.setFont(new Font("SansSerif", Font.PLAIN, fontSize));

        // Save the current settings
        saveSettings(name, color, emoji, fontSize);
    }

    /**
     * Converts a color name string to a java.awt.Color object.
     * @param colorName The name of the color (e.g., "Black", "Blue").
     * @return The corresponding Color object. Defaults to Black if not found.
     */
    private Color getColorFromString(String colorName) {
        switch (colorName.toLowerCase()) {
            case "black": return Color.BLACK;
            case "blue": return Color.BLUE;
            case "green": return Color.GREEN;
            case "red": return Color.RED;
            case "purple": return new Color(128, 0, 128); // Custom RGB for purple
            default: return Color.BLACK;
        }
    }

    /**
     * Saves the current application settings (name, color, emoji, font size)
     * to a JSON file.
     * @param name The user's name.
     * @param color The selected color.
     * @param emoji Whether emoji is enabled.
     * @param fontSize The selected font size.
     */
    private void saveSettings(String name, String color, boolean emoji, int fontSize) {
        JSONObject settings = new JSONObject();
        settings.put("name", name);
        settings.put("color", color);
        settings.put("emoji", emoji);
        settings.put("font_size", fontSize);

        try (FileWriter file = new FileWriter(SAVE_FILE)) {
            file.write(settings.toString(4)); // Write JSON with 4-space indentation
        } catch (IOException e) {
            System.err.println("Error saving settings: " + e.getMessage());
        }
    }

    /**
     * Loads previously saved application settings from a JSON file
     * and applies them to the UI components.
     */
    private void loadSettings() {
        File file = new File(SAVE_FILE);
        if (file.exists()) {
            try (FileReader reader = new FileReader(file)) {
                JSONObject settings = new JSONObject(new JSONTokener(reader));

                // Apply loaded settings to UI components, providing default values
                nameInput.setText(settings.optString("name", ""));
                colorDropdown.setSelectedItem(settings.optString("color", "Black"));
                emojiCheck.setSelected(settings.optBoolean("emoji", false));
                fontSlider.setValue(settings.optInt("font_size", 12));

            } catch (IOException e) {
                System.err.println("Error loading settings file: " + e.getMessage());
            } catch (org.json.JSONException e) {
                System.err.println("Error parsing JSON from settings file: " + e.getMessage());
            }
        } else {
            System.out.println("Settings file not found. Using default settings.");
        }
    }

    /**
     * Main method to run the application.
     * Ensures that GUI updates are performed on the Event Dispatch Thread (EDT).
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        // Run the GUI creation on the Event Dispatch Thread for thread safety
        SwingUtilities.invokeLater(() -> {
            new InteractiveApp().setVisible(true); // Create and show the application window
        });
    }
}
