import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.util.HashMap;
import java.util.Map;
import org.json.JSONObject;
import org.json.JSONTokener;
import org.json.JSONException;

/**
 * @brief The InteractiveApp class represents the main window of the application.
 *
 * This class extends JFrame and sets up all the UI elements,
 * handles user interactions, and manages saving/loading settings.
 */
public class InteractiveApp extends JFrame implements ActionListener {

    // Define the save file name
    private static final String SAVE_FILE = "user_settings.json";

    // --- UI Widgets ---
    private JLabel nameLabel;
    private JTextField nameInput;
    private JLabel colorLabel;
    private JComboBox<String> colorDropdown;
    private JCheckBox emojiCheck;
    private JLabel fontLabel;
    private JSlider fontSlider;
    private JButton button;
    private JLabel resultLabel;

    // Map for converting color names to AWT Color objects
    private static final Map<String, Color> COLOR_MAP = new HashMap<>();
    static {
        COLOR_MAP.put("black", Color.BLACK);
        COLOR_MAP.put("blue", Color.BLUE);
        COLOR_MAP.put("green", Color.GREEN);
        COLOR_MAP.put("red", Color.RED);
        COLOR_MAP.put("purple", new Color(128, 0, 128)); // Custom color for purple
    }

    /**
     * @brief Constructor for the InteractiveApp.
     *
     * Initializes the UI, sets up the layout, connects action listeners,
     * and loads any previously saved settings.
     */
    public InteractiveApp() {
        // Set window properties
        setTitle("Interactive App");
        setSize(400, 300); // Set window width and height
        setLocationRelativeTo(null); // Center the window on the screen
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // Close operation for the frame

        // --- Widget Initialization ---
        nameLabel = new JLabel("Enter your name:");
        nameInput = new JTextField(20); // 20 columns wide

        colorLabel = new JLabel("Choose a color:");
        colorDropdown = new JComboBox<>(new String[]{"Black", "Blue", "Green", "Red", "Purple"});

        emojiCheck = new JCheckBox("Add an emoji ðŸ˜Š");

        fontLabel = new JLabel("Select font size:");
        fontSlider = new JSlider(JSlider.HORIZONTAL, 10, 30, 12); // Orientation, min, max, initial

        button = new JButton("Show Message");
        button.addActionListener(this); // Register this class as the action listener for the button

        resultLabel = new JLabel("");
        resultLabel.setHorizontalAlignment(SwingConstants.CENTER); // Center align the text

        // --- Layout Setup (Using BoxLayout for vertical arrangement) ---
        JPanel contentPane = new JPanel();
        contentPane.setLayout(new BoxLayout(contentPane, BoxLayout.Y_AXIS)); // Vertical box layout

        // Add components to the content pane with some padding
        contentPane.add(Box.createVerticalStrut(10)); // Top padding
        contentPane.add(nameLabel);
        contentPane.add(nameInput);
        contentPane.add(Box.createVerticalStrut(5)); // Small gap
        contentPane.add(colorLabel);
        contentPane.add(colorDropdown);
        contentPane.add(Box.createVerticalStrut(5));
        contentPane.add(emojiCheck);
        contentPane.add(Box.createVerticalStrut(5));
        contentPane.add(fontLabel);
        contentPane.add(fontSlider);
        contentPane.add(Box.createVerticalStrut(10));
        contentPane.add(button);
        contentPane.add(Box.createVerticalStrut(10));
        contentPane.add(resultLabel);
        contentPane.add(Box.createVerticalStrut(10)); // Bottom padding

        // Set borders for visual separation and padding
        contentPane.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 20));

        // Add the content pane to the frame
        add(contentPane);

        // Load settings when the application starts
        loadSettings();
    }

    /**
     * @brief Handles action events, specifically button clicks.
     * @param e The ActionEvent generated by the button click.
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == button) {
            showMessage();
        }
    }

    /**
     * @brief Displays the message based on user input.
     *
     * Gathers data from UI widgets, constructs a message, applies styling,
     * and saves the current settings.
     */
    private void showMessage() {
        String name = nameInput.getText().trim(); // Get text and trim whitespace
        String colorName = (String) colorDropdown.getSelectedItem();
        boolean emoji = emojiCheck.isSelected();
        int fontSize = fontSlider.getValue();

        // Input validation: Check if name is empty
        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter your name!", "Warning", JOptionPane.WARNING_MESSAGE);
            return; // Stop execution if validation fails
        }

        // Construct the message
        StringBuilder message = new StringBuilder();
        message.append("Hello, ").append(name).append("! Your favorite color is ").append(colorName).append(".");
        if (emoji) {
            message.append(" ðŸ˜Š");
        }

        // Set the message
        resultLabel.setText(message.toString());

        // Apply styling (color and font size)
        Color selectedColor = COLOR_MAP.get(colorName.toLowerCase());
        if (selectedColor != null) {
            resultLabel.setForeground(selectedColor);
        } else {
            resultLabel.setForeground(Color.BLACK); // Default to black if color not found
        }
        // Using "SansSerif" as a common cross-platform font. "Inter" might not be available by default.
        resultLabel.setFont(new Font("SansSerif", Font.PLAIN, fontSize));

        // Save the current settings
        saveSettings(name, colorName, emoji, fontSize);
    }

    /**
     * @brief Saves the current user settings to a JSON file.
     * @param name The user's name.
     * @param color The chosen color.
     * @param emoji Whether emoji is enabled.
     * @param fontSize The selected font size.
     */
    private void saveSettings(String name, String color, boolean emoji, int fontSize) {
        JSONObject settingsObject = new JSONObject(); // Create a JSON object
        settingsObject.put("name", name);
        settingsObject.put("color", color);
        settingsObject.put("emoji", emoji);
        settingsObject.put("font_size", fontSize);

        try (FileWriter writer = new FileWriter(SAVE_FILE)) {
            // Write the JSON object to the file
            settingsObject.write(writer);
            System.out.println("Settings saved successfully.");
        } catch (IOException | JSONException e) {
            System.err.println("Error saving settings: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * @brief Loads user settings from a JSON file.
     *
     * If the save file exists, it reads the settings and applies them
     * to the respective UI widgets. Provides default values if keys are missing.
     */
    private void loadSettings() {
        File file = new File(SAVE_FILE);
        if (!file.exists()) {
            System.out.println("Save file not found: " + SAVE_FILE);
            return; // No file to load from
        }

        try (FileReader reader = new FileReader(SAVE_FILE)) {
            JSONObject settingsObject = new JSONObject(new JSONTokener(reader));

            // Retrieve values with default fallbacks using opt methods
            nameInput.setText(settingsObject.optString("name", ""));
            colorDropdown.setSelectedItem(settingsObject.optString("color", "Black"));
            emojiCheck.setSelected(settingsObject.optBoolean("emoji", false));
            fontSlider.setValue(settingsObject.optInt("font_size", 12));

            System.out.println("Settings loaded successfully.");
        } catch (IOException | JSONException e) {
            System.err.println("Error loading settings: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * @brief The main entry point of the application.
     * @param args Command-line arguments (not used in this app).
     */
    public static void main(String[] args) {
        // Ensure GUI updates are performed on the Event Dispatch Thread (EDT)
        SwingUtilities.invokeLater(() -> {
            new InteractiveApp().setVisible(true); // Create and show the application window
        });
    }
}
